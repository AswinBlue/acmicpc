int n;
	ios::sync_with_stdio(false);
	cin.tie(NULL);

	cin >> n;
	int *price= new int[n+1];
	price[0] = 0;
	int r1, r2, g1, g2, b1, b2;
	cin >> r1 >> g1 >> b1;

	int choice = 0;

	for (int i = 1; i < n; ++i) {
		cin >> r2 >> g2 >> b2;
		int R, G, B;
		R = r1 + min(g2, b2);
		G = g1 + min(r2, b2);
		B = b1 + min(r2, g2);

		//get minimum price while considering previous choice
		switch (choice) {
		case 0:
			if (R < G && R < B) {
				price[i] = r1 + price[i - 1];
				choice = 1;
			}
			else if (G < R && G < B) {
				price[i] = g1 + price[i - 1];
				choice = 2;
			}
			else if (B < R && B < G) {
				price[i] = b1 + price[i - 1];
				choice = 3;
			}
			else {
				//all three case has same price
				//follow the (R < G && R < B) case
				//set choice as 0
				
				price[i] = min(r1, min(g1, b1)) + price[i - 1];
				choice = 0;
			}
			/*if (i > 1) {
				price[i - 1] =
			}*/
			break;
		case 1:
			price[i] = r1 + price[i - 1];
			choice = 1;
			break;
		case 2:
			price[i] = g1 + price[i - 1];
			choice = 2;
			break;
		case 3:
			price[i] = b1 + price[i - 1];
			choice = 3;
			break;
		}

		//handle the last house
		if (i == n - 1) {
			switch (choice) {
			case 1:
				price[n] = price[n - 1] + min(g2, b2);
				break;
			case 2:
				price[n] = price[n - 1] + min(r2, b2);
				break;
			case 3:
				price[n] = price[n - 1] + min(r2, g2);
				break;
			default://when all cases have same price
				price[n] = price[n - 1] + min(r2,min(g2, b2));
				break;
			}
		}
		else {
			r1 = r2;
			g1 = g2;
			b1 = b2;
		}
	}

	//exception when n=1
	if (n == 1) {
		price[1] = min(min(r1, g1), b1);
	}
	cout << price[n] << "\n";